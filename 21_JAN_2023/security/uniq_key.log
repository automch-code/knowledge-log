There are several ways to generate a unique key, depending on the programming language and use case. Some common methods include:

Using a UUID (Universally Unique Identifier) library:
  Many programming languages have libraries that can generate UUIDs,
  which are guaranteed to be unique across all devices and systems.

Using a hash function:
  A hash function can be used to generate a unique key from a given input.
  The input could be a combination of various data fields, such as a timestamp and a user's ID.

Using a counter:
  A counter can be incremented each time a new key is needed, ensuring that each key is unique.

Using a combination of above methods

It's important to note that the uniqueness of a key is not guaranteed if the key is generated by the client side and there is a possibility of collision if keys are generated independently with no coordination.

#######################################################################

To prevent duplicate unique keys, you can use a combination of different methods:

Database constraint: 
  If you are storing the keys in a database,
  you can use a unique constraint on the key column to ensure that each key is unique.

Indexing: 
  You can use indexing to prevent duplicate keys.
  This method is useful when you are using a hash function or a counter to generate keys.

Server-side key generation:
  Instead of generating keys on the client side,
  you can use a server-side key generation process.
  This ensures that the keys are generated in a centralized location, which reduces the possibility of collision.

Coordination:
  If you are using a distributed system,
  you can use a coordination mechanism to ensure that keys are generated in a coordinated manner.

Using a combination of above methods

It's important to note that, whatever method you choose,
it's good to have a fallback mechanism to handle key collision and assign new key instead of the duplicate one.